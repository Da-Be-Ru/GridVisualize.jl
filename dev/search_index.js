var documenterSearchIndex = {"docs":
[{"location":"api/#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"Modules = [GridVisualize]\nPrivate = false\nOrder  = [:function, :type]\nPages = [\"dispatch.jl\"]","category":"page"},{"location":"api/#GridVisualize.available_kwargs-Tuple{}","page":"Public API","title":"GridVisualize.available_kwargs","text":"available_kwargs()\n\n\nAvailable kwargs for all methods of this package.\n\nshow: Show plot immediately. Default: false\nreveal: Show plot immediately (same as :show). Default: false\nclear: Clear plot before new plot.. Default: true\nlayout: Layout of plots in window. Default: (1, 1)\nresolution: Plot window resolution. Default: (500, 500)\nlegend: Legend (position): one of [:none, :best, :lt, :ct, :rt, :lc, :rc, :lb, :cb, :rb]. Default: none\ntitle: Plot title. Default: ``\nxlabel: x axis label. Default: ``\nylabel: y axis label. Default: ``\nzlabel: z axis label. Default: ``\nxlimits: x limits. Default: (1, -1)\nylimits: y limits. Default: (1, -1)\nzlimits: z limits. Default: (1, -1)\nlimits: function limits. Default: (1, -1)\naspect: Aspect ratio modification. Default: 1.0\nfontsize: Fontsize of titles. All others are relative to it. Default: 20\nlinewidth: 1D plot or isoline linewidth. Default: 2\nlinestyle: 1D Plot linestyle: one of [:solid, :dash, :dot, :dashdot, :dashdotdot]. Default: solid\nmarkevery: 1D plot marker stride. Default: 5\nmarkersize: 1D plot marker size. Default: 5\nmarkershape: 1D plot marker shape: one of [:none, :circle, :star5, :diamond, :hexagon, :cross, :xcross, :utriangle, :dtriangle, :rtriangle, :ltriangle, :pentagon, :+, :x]. Default: none\ncolor: 1D plot line color. Default: (0.0, 0.0, 0.0)\ncellwise: 1D plots cellwise can be slow). Default: false\nlabel: 1D plot label. Default: ``\nlevels: contour plot: number of isolevels. Default: 5\nelevation: 2D plot height factor for elevation. Default: 0.0\ncolorlevels: 2D/3D contour plot: number of color levels. Default: 51\ncolormap: 2D/3D contour plot color map (any from ColorSchemes.jl). Default: viridis\ncolorbar: 2D/3D plot colorbar. One of [:none, :vertical, :horizontal]. Default: vertical\noutlinealpha: 3D outline surface alpha value. Default: 0.05\nlevelalpha: 3D isolevel alpha. Default: 0.25\nplanealpha: 3D plane section alpha. Default: 1.0\ninterior: 3D plot interior of grid. Default: true\nxplanes: 3D x plane positions. Default: [1.7976931348623157e308]\nyplanes: 3D y plane positions. Default: [1.7976931348623157e308]\nzplanes: 3D z plane positions. Default: [1.7976931348623157e308]\nazim: 3D azimuth angle  (in degrees). Default: -60\nelev: 3D elevation angle  (in degrees). Default: 30\nperspectiveness: 3D perspective A number between 0 and 1, where 0 is orthographic, and 1 full perspective. Default: 0.25\nscene3d: 3D plot type of Makie scene. Alternaitve to Axis3 is LScene. Default: Axis3\nfignumber: Figure number (PyPlot). Default: 1\nframepos: Subplot position in frame (VTKView). Default: 1\nsubplot: Private: Actual subplot. Default: (1, 1)\nbackend: Backend for PlutoVista plot. Default: default\ndim: Data dimension for PlutoVista plot. Default: 1\nregions: List of regions to plot. Default: all\nspecies: Number of species to plot or number of species in regions. Default: 1\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.default_plotter!-Tuple{Any}","page":"Public API","title":"GridVisualize.default_plotter!","text":"   plotter!(Plotter)\n\nSet plotter module as the default plotter backend.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.default_plotter-Tuple{}","page":"Public API","title":"GridVisualize.default_plotter","text":"default_plotter()\n\n\nReturn default plotter backend\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.gridplot!-Tuple{Union{Nothing, Dict{Symbol, Any}}, ExtendableGrid}","page":"Public API","title":"GridVisualize.gridplot!","text":"gridplot!(visualizer[i,j], grid, kwargs...)\ngridplot!(visualizer, grid, kwargs...)\n\nPlot grid into subplot in the visualizer. If [i,j] is omitted, [1,1] is assumed.\n\nKeyword arguments: see available_kwargs\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.gridplot-Tuple{ExtendableGrid}","page":"Public API","title":"GridVisualize.gridplot","text":"gridplot(grid; Plotter=default_plotter(); kwargs...)\n\nCreate grid visualizer and plot grid\n\nKeyword arguments: see available_kwargs\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.ismakie-Tuple{Any}","page":"Public API","title":"GridVisualize.ismakie","text":"ismakie(Plotter)\n\n\nHeuristically check if Plotter is Makie/WGLMakie\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.isplots-Tuple{Any}","page":"Public API","title":"GridVisualize.isplots","text":"isplots(Plotter)\n\n\nHeuristically check if  Plotter is Plots\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.isplutovista-Tuple{Any}","page":"Public API","title":"GridVisualize.isplutovista","text":"isplutovista(Plotter)\n\n\nHeuristically check if Plotter is PlutoVista\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.ispyplot-Tuple{Any}","page":"Public API","title":"GridVisualize.ispyplot","text":"ispyplot(Plotter)\n\n\nHeuristically check if Plotter is PyPlot\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.isvtkview-Tuple{Any}","page":"Public API","title":"GridVisualize.isvtkview","text":"isvtkview(Plotter)\n\n\nHeuristically check if Plotter is VTKView\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.plottertype-Tuple{GridVisualizer}","page":"Public API","title":"GridVisualize.plottertype","text":"plottertype(p)\n\n\nReturn the type of a plotter.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.plottertype-Tuple{Union{Nothing, Module}}","page":"Public API","title":"GridVisualize.plottertype","text":"plottertype(Plotter)\n\n\nHeuristically detect type of plotter, returns the corresponding abstract type fro plotting.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.reveal-Tuple{GridVisualizer}","page":"Public API","title":"GridVisualize.reveal","text":"reveal(visualizer)\n\n\nFinish and show plot. Same as setting :reveal=true or :show=true in last plot statment for a context.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.save-Tuple{String, Any}","page":"Public API","title":"GridVisualize.save","text":"save(fname, scene; Plotter)\n\n\nSave scene returned from reveal, scalarplot or gridplot  to disk.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.save-Tuple{String, GridVisualizer}","page":"Public API","title":"GridVisualize.save","text":"save(fname, visualizer)\n\n\nSave last plotted figure from visualizer to disk.\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.scalarplot!-Tuple{Union{Nothing, Dict{Symbol, Any}}, ExtendableGrid, Any}","page":"Public API","title":"GridVisualize.scalarplot!","text":"scalarplot!(visualizer[i,j], grid, vector; kwargs...)\nscalarplot!(visualizer, grid, vector; kwargs...)\nscalarplot!(visualizer[i,j], grid, function; kwargs...)\nscalarplot!(visualizer[i,j], X, vector; kwargs...)\nscalarplot!(visualizer[i,j], X, function; kwargs...)\nscalarplot!(visualizer[i,j], X, Y, function; kwargs...)\nscalarplot!(visualizer[i,j], X, Y, Z, function; kwargs...)\n\nPlot node vector on grid as P1 FEM function on the triangulation into subplot in the visualizer. If [i,j] is omitted, [1,1] is assumed.\n\nIf instead of the node vector,  a function is given, it will be evaluated on the grid.\n\nIf instead of the grid, coordinate vectors are given, a temporary grid is created.\n\nKeyword arguments: see available_kwargs\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.scalarplot-Tuple{ExtendableGrid, Any}","page":"Public API","title":"GridVisualize.scalarplot","text":"scalarplot(grid,vector; Plotter=default_plotter())\nscalarplot(grid,function; Plotter=default_plotter())\nscalarplot(X,vector; Plotter=default_plotter())\nscalarplot(X,function; Plotter=default_plotter())\nscalarplot(X,Y,function; Plotter=default_plotter())\nscalarplot(X,Y,Z,function; Plotter=default_plotter())\n\n\nPlot node vector on grid as P1 FEM function on the triangulation.\n\nIf instead of the node vector,  a function is given, it will be evaluated on the grid.\n\nIf instead of the grid,  vectors for coordinates are given, a grid is created automatically.\n\nKeyword arguments: see available_kwargs\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.GridVisualizer","page":"Public API","title":"GridVisualize.GridVisualizer","text":"struct GridVisualizer\n\nGridVisualizer struct\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.GridVisualizer-Tuple{}","page":"Public API","title":"GridVisualize.GridVisualizer","text":"    GridVisualizer(; Plotter=default_plotter() , kwargs...)\n\nCreate a  grid visualizer\n\nPlotter: defaults to default_plotter() and can be PyPlot, Plots, VTKView, Makie. This pattern to pass the backend as a module to a plot function allows to circumvent to create heavy default package dependencies.\n\nDepending on the layout keyword argument, a 2D grid of subplots is created. Further ...plot! commands then plot into one of these subplots:\n\nvis=GridVisualizer(Plotter=PyPlot, layout=(2,2)\n...plot!(vis[1,2], ...)\n\nA ...plot  command just implicitely creates a plot context:\n\ngridplot(grid, Plotter=PyPlot) \n\nis equivalent to\n\nvis=GridVisualizer(Plotter=PyPlot, layout=(1,1))\ngridplot!(vis,grid) \nreveal(vis)\n\nPlease note that the return values of all plot commands are specific to the Plotter.\n\nAn interactive mode switch key   for GLMakie (,)  and  VTKView (*) allows to toggle between \"gallery view\" showing all plots at once and \"focused view\" showing only one plot.\n\nKeyword arguments: see available_kwargs\n\n\n\n\n\n","category":"method"},{"location":"api/#GridVisualize.MakieType","page":"Public API","title":"GridVisualize.MakieType","text":"abstract type MakieType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.PlotsType","page":"Public API","title":"GridVisualize.PlotsType","text":"abstract type PlotsType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.PlutoVistaType","page":"Public API","title":"GridVisualize.PlutoVistaType","text":"abstract type PlutoVistaType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.PyPlotType","page":"Public API","title":"GridVisualize.PyPlotType","text":"abstract type PyPlotType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"api/#GridVisualize.VTKViewType","page":"Public API","title":"GridVisualize.VTKViewType","text":"abstract type VTKViewType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"privapi/#Private-API","page":"Private API","title":"Private API","text":"","category":"section"},{"location":"privapi/#Common-methods","page":"Private API","title":"Common methods","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize]\nPrivate = true\nPages = [\"dispatch.jl\",\"common.jl\"]","category":"page"},{"location":"privapi/#GridVisualize.SubVisualizer","page":"Private API","title":"GridVisualize.SubVisualizer","text":"A SubVisualizer is just a dictionary which contains plotting information, including type of the plotter and its position in the plot.\n\n\n\n\n\n","category":"type"},{"location":"privapi/#GridVisualize.default_backend","page":"Private API","title":"GridVisualize.default_backend","text":"nothing as initial default plotter\n\n\n\n\n\n","category":"constant"},{"location":"privapi/#GridVisualize.MeshCatType","page":"Private API","title":"GridVisualize.MeshCatType","text":"abstract type MeshCatType\n\nAbstract type for dispatching on plotter\n\n\n\n\n\n","category":"type"},{"location":"privapi/#Base.getindex-Tuple{GridVisualizer, Any, Any}","page":"Private API","title":"Base.getindex","text":"getindex(p, i, j)\n\n\nReturn a SubVisualizer\n\n\n\n\n\n","category":"method"},{"location":"privapi/#Base.size-Tuple{GridVisualizer}","page":"Private API","title":"Base.size","text":"size(p)\n\n\nReturn the layout of a GridVisualizer\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.ismeshcat-Tuple{Any}","page":"Private API","title":"GridVisualize.ismeshcat","text":"ismeshcat(Plotter)\n\n\nHeuristically check if Plotter is MeshCat\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.bregion_cmap-Tuple{Any}","page":"Private API","title":"GridVisualize.bregion_cmap","text":"bregion_cmap(n)\n\n\nCreate customized distinguishable colormap for boundary regions\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.extract_visible_cells3D-Tuple{ExtendableGrid, Any}","page":"Private API","title":"GridVisualize.extract_visible_cells3D","text":"extract_visible_cells3D(grid, xyzcut; primepoints, Tp, Tf)\n\n\nExtract visible tetrahedra - those intersecting with the planes x=xyzcut[1] or y=xyzcut[2]  or z=xyzcut[3]. \n\nReturn corresponding points and facets for each region for drawing as mesh (Makie,MeshCat) or trisurf (pyplot)\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.marching_tetrahedra-NTuple{5, Any}","page":"Private API","title":"GridVisualize.marching_tetrahedra","text":"marching_tetrahedra(coord, cellnodes, func, planes, flevels; tol, primepoints, primevalues, Tv, Tp, Tf)\n\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.marching_tetrahedra-Tuple{ExtendableGrid, Any, Any, Any}","page":"Private API","title":"GridVisualize.marching_tetrahedra","text":"marching_tetrahedra(grid, func, planes, flevels; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.markerpoints-Tuple{Any, Any, Any}","page":"Private API","title":"GridVisualize.markerpoints","text":"markerpoints(points, nmarkers, transform)\n\n\nAssume that points are nodes of a polyline. Place nmarkers equidistant markers  at the polyline, under the assumption that the points are transformed via the transformation matrix M vor visualization.\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.region_cmap-Tuple{Any}","page":"Private API","title":"GridVisualize.region_cmap","text":"region_cmap(n)\n\n\nCreate customized distinguishable colormap for interior regions\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.tet_x_plane!-NTuple{6, Any}","page":"Private API","title":"GridVisualize.tet_x_plane!","text":"tet_x_plane!(ixcoord, ixvalues, pointlist, node_indices, planeq_values, function_values; tol)\n\n\nCalculate intersections between tetrahedron with given linear   fucntion data and plane \n\nAdapted from https://github.com/j-fu/gltools/blob/master/glm-3d.c#L341\n\nA non-empty intersection is either a triangle or a planar quadrilateral,   define by either 3 or 4 intersection points between tetrahedron edges   and the plane.\n\nInput: \n\n  pointlist: 3xN array of grid point coordinates\nnodeindices: 4 element array of node indices (pointing into pointlist and functionvalues)\nplaneq_values: 4 element array of plane equation evaluated at the node coordinates\nfunction_values: N element array of function values\n\nMutates:\n\nixcoord: 3x4 array of plane - tetedge intersection coordinates\nixvalues: 4 element array of fuction values at plane - tetdedge intersections\n\nReturns:\n\nnxs,ixcoord,ixvalues\n\nThis method can be used both for the evaluation of plane sections and for   the evaluation of function isosurfaces.\n\n\n\n\n\n","category":"method"},{"location":"privapi/#PyPlot","page":"Private API","title":"PyPlot","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize]\nPrivate = true\nPages = [\"pyplot.jl\"]","category":"page"},{"location":"privapi/#GridVisualize.tridata-Tuple{Any}","page":"Private API","title":"GridVisualize.tridata","text":"tridata(grid)\n\n\nReturn tridata to be splatted to PyPlot calls\n\n\n\n\n\n","category":"method"},{"location":"privapi/#Makie","page":"Private API","title":"Makie","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize,FlippableLayout]\nPrivate = true\nPages = [\"makie.jl\", \"flippablelayout.jl\"]","category":"page"},{"location":"privapi/#GridVisualize.makeaxis3d-Tuple{Any}","page":"Private API","title":"GridVisualize.makeaxis3d","text":"makeaxis3d(ctx)\n\nDispatch between LScene and new Axis3. Axis3 does not allow zoom, so we support LScene in addition.\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.makescene2d-Tuple{Any}","page":"Private API","title":"GridVisualize.makescene2d","text":"makescene2d(ctx)\n\nComplete scene with title and status line showing interaction state. This uses a gridlayout and its  protrusion capabilities.\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.scene_interaction","page":"Private API","title":"GridVisualize.scene_interaction","text":" scene_interaction(update_scene,view,switchkeys::Vector{Symbol}=[:nothing])\n\nControl multiple scene elements via keyboard up/down keys.  Each switchkey is assumed to correspond to one of these elements. Pressing a switch key transfers control to its associated element.\n\nControl of values of the current associated element is performed by triggering change values via up/down (± 1)  resp. pageup/pagedown (±10) keys\n\nThe update_scene callback gets passed the change value and the symbol.\n\n\n\n\n\n","category":"function"},{"location":"privapi/#GridVisualize.FlippableLayout","page":"Private API","title":"GridVisualize.FlippableLayout","text":"This module is a submodule of GridVisualize.\n\nIt manages a layoutscene with interactive layout and blocking functionality.\n\nThanks to Julius Krumbiegel for providing  a basic implementation of focus switching.\n\nGridVisualize avoids creating dependencies on plotting backends. So we provide a way to emulate \"import Makie\" by allowing to set it as a global variable in the setmakie!.  As a consequence, we can't use Makie types at compile time.\n\n\n\n\n\n","category":"module"},{"location":"privapi/#GridVisualize.FlippableLayout.FLayout","page":"Private API","title":"GridVisualize.FlippableLayout.FLayout","text":"mutable struct FLayout\n\nStruct describing flippable layout data. We don't type annotate with Makie types as they are unknown at start time.\n\nvisible\nVisible GridLayout\n\noffscreen\nHidden GridLayot\n\nblocked\nHas the layout been blocked by the block key ?\n\nlayoutables\nLayoutables attached to layout\n\ncondition\nCondition variable working together with the blocked field.\n\n\n\n\n\n","category":"type"},{"location":"privapi/#GridVisualize.FlippableLayout.flayoutscene-Tuple{}","page":"Private API","title":"GridVisualize.FlippableLayout.flayoutscene","text":"flayoutscene(;blocked=false, kwargs...)\n\nLayoutscene with interactive layout and blocking functionality.\n\nThe , key switches between focused view showing only one subscene and \"gallery view\" showing all layoutables at once.\n\nThe space key toggles blocking of the execution of the main therad when yield is replaced by yieldwait. Initial blocking state is  set by the blocked kwarg.\n\nThe kwargs... are the same as of AbstractPlotting.layoutscene.\n\nThe idea is that this can work in some cases as a drop-in replacement of layoutscene.     \n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.FlippableLayout.setmakie!-Tuple{Any}","page":"Private API","title":"GridVisualize.FlippableLayout.setmakie!","text":"setmakie!(MyMakie)\n\nSet the Makie module. This Makie can be GLMakie,WGLMakie,CairoMakie\n\n\n\n\n\n","category":"method"},{"location":"privapi/#GridVisualize.FlippableLayout.yieldwait-Tuple{GridVisualize.FlippableLayout.FLayout}","page":"Private API","title":"GridVisualize.FlippableLayout.yieldwait","text":" yieldwait(fliplayoutscene)\n\nYield and wait in case of scene being blocked via space key toggle\n\n\n\n\n\n","category":"method"},{"location":"privapi/#Plots","page":"Private API","title":"Plots","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize]\nPrivate = true\nPages = [\"plots.jl\"]","category":"page"},{"location":"privapi/#GridVisualize.rectdata-Tuple{Any, Any}","page":"Private API","title":"GridVisualize.rectdata","text":"rectdata(grid, U)\n\n\nReturn rectangular grid data + function to be splatted into Plots calls\n\n\n\n\n\n","category":"method"},{"location":"privapi/#VTKView","page":"Private API","title":"VTKView","text":"","category":"section"},{"location":"privapi/","page":"Private API","title":"Private API","text":"Modules = [GridVisualize]\nPrivate = true\nPages = [\"vtkview.jl\"]","category":"page"},{"location":"examples/plotting/#Plotting-examples","page":"Plotting examples","title":"Plotting examples","text":"","category":"section"},{"location":"examples/plotting/#Plotters","page":"Plotting examples","title":"Plotters","text":"","category":"section"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"All plot functions in GridVisualize.jl have a Plotter keyword argument  which defaults to nothing.  This allows to pass a module as plotting backend  without creating a dependency. Fully supported are PyPlot and GLMakie.  WGLMakie and CairoMakie work in principle but in the moment don't deliver  all necessary functionality.","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"Also supported is VTKView  which is exeprimental and works only on linux","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"Generally, grids and P1 FEM functions on grids can be plotted up to now.","category":"page"},{"location":"examples/plotting/#Grid-plots","page":"Plotting examples","title":"Grid plots","text":"","category":"section"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"Here, we define some sample grids for plotting purposes.","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"using ExtendableGrids\nusing GridVisualize\n\nfunction grid1d(;n=50)\n    X=collect(0:1/n:1)\n    g=simplexgrid(X)\nend\n\nfunction grid2d(;n=20)\n    X=collect(0:1/n:1)\n    g=simplexgrid(X,X)\nend\n\nfunction grid3d(;n=15)\n    X=collect(0:1/n:1)\n    g=simplexgrid(X,X,X)\nend","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"Now, we can use the plot command of GridVisualize to plot grids Note the kwargs xplane, yplane and zplane which allow to control cutplanes which peel off some elements from the grid in 3d and allow to explore the inner triangulation.","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"For Makie and VTKView, the cutplane values can be controlled interactively.","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"function plotting_grid3d(;Plotter=default_plotter(), kwargs...)\n    gridplot(grid3d(); Plotter=Plotter, kwargs...)\nend","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"(Image: )","category":"page"},{"location":"examples/plotting/#Function-plots","page":"Plotting examples","title":"Function plots","text":"","category":"section"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"Let us define some functions","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"function func1d(;n=50)\n    g=grid1d(n=n)\n    g,map(x->sinpi(2*x[1]),g)\nend\n\nfunction func2d(;n=20)\n    g=grid2d(n=n)\n    g,map((x,y)->sinpi(2*x)*sinpi(3.5*y),g)\nend\n\nfunction func3d(;n=15)\n    g=grid3d(n=n)\n    g, map((x,y,z)->sinpi(2*x)*sinpi(3.5*y)*sinpi(1.5*z),g)\nend","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"Plotting a function then goes as follows: xplane, yplane and zplane now define cut planes where the function projection is plotted as a heatmap. The additional flevel keyword argument allows to control an isolevel.","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"For Makie and VTKView, the cutplane values and the flevel can be controlled interactively.","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"function plotting_func3d(;Plotter=default_plotter(), kwargs...)\n    g,f=func3d()\n    scalarplot(g,f; Plotter=Plotter, zplane=0.49,xplane=0.49,flevel=0.25, kwargs...)\nend","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"(Image: )","category":"page"},{"location":"examples/plotting/#Multiscene-plots","page":"Plotting examples","title":"Multiscene plots","text":"","category":"section"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"We can combine multiple plots into one scene according to some layout grid given by the layout parameter.","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"The ',' key for GLMakie and the '*' key for VTKView allow to switch between gallery view (default) and focused view of only one subscene.","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"function plotting_multiscene(;Plotter=default_plotter())\n\n    p=GridVisualizer(;Plotter=Plotter,layout=(2,3),clear=true,resolution=(800,500))\n    gridplot!(p[1,1],grid1d(), title=\"1D grid\")\n    scalarplot!(p[2,1],grid1d(), sin, title=\"1D grid function\", label=\"sin\",markershape=:diamond,color=:red,legend=:rb)\n    scalarplot!(p[2,1],grid1d(), cos, title=\"1D grid function\", label=\"cos\",linestyle=:dash,markershape=:none,color=:green,clear=false)\n    gridplot!(p[1,2],grid2d(),title=\"2D grid\")\n    scalarplot!(p[2,2],func2d()...,colormap=:bamako,title=\"2D grid function\")\n    gridplot!(p[1,3],grid3d(),zplane=0.49,title=\"3D grid\")\n    scalarplot!(p[2,3],func3d()...,zplane=0.49,flevel=0.5,colormap=:bamako, title=\"3D grid function\")\n    reveal(p)\nend","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"(Image: )","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"","category":"page"},{"location":"examples/plotting/","page":"Plotting examples","title":"Plotting examples","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"}]
}
